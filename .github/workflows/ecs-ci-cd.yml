name: ECS CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  AWS_REGION: us-west-2
  ECR_REPOSITORY_FRONTEND: react-python-app-frontend
  ECR_REPOSITORY_BACKEND: react-python-app-backend
  ECS_CLUSTER: react-python-app-production-cluster
  ECS_SERVICE_FRONTEND: react-python-app-production-frontend
  ECS_SERVICE_BACKEND: react-python-app-production-backend

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Cache Python dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements.txt') }}

    - name: Install frontend dependencies
      working-directory: ./frontend
      run: |
        npm ci
        npm run lint
        npm run test
        npm run build

    - name: Install backend dependencies
      working-directory: ./backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov

    - name: Run backend tests
      working-directory: ./backend
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
        REDIS_URL: redis://localhost:6379/0
        JWT_SECRET_KEY: test-secret-key
      run: |
        python -m pytest --cov=. --cov-report=xml

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage.xml
        flags: backend
        
    - name: Security scan - Frontend
      working-directory: ./frontend
      run: npm audit --audit-level=high

    - name: Security scan - Backend
      working-directory: ./backend
      run: |
        pip install safety bandit
        safety check
        bandit -r . -f json -o bandit-report.json || true

  build-and-deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build, tag, and push frontend image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        cd frontend
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY_FRONTEND:$IMAGE_TAG .
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY_FRONTEND:latest .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY_FRONTEND:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY_FRONTEND:latest

    - name: Build, tag, and push backend image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        cd backend
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY_BACKEND:$IMAGE_TAG .
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY_BACKEND:latest .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY_BACKEND:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY_BACKEND:latest

    - name: Download task definition - Frontend
      run: |
        aws ecs describe-task-definition \
          --task-definition ${{ env.ECS_CLUSTER }}-frontend \
          --query taskDefinition > frontend-task-definition.json

    - name: Download task definition - Backend
      run: |
        aws ecs describe-task-definition \
          --task-definition ${{ env.ECS_CLUSTER }}-backend \
          --query taskDefinition > backend-task-definition.json

    - name: Fill in the new image ID in the Amazon ECS task definition - Frontend
      id: task-def-frontend
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: frontend-task-definition.json
        container-name: frontend
        image: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY_FRONTEND }}:${{ github.sha }}

    - name: Fill in the new image ID in the Amazon ECS task definition - Backend
      id: task-def-backend
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: backend-task-definition.json
        container-name: backend
        image: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY_BACKEND }}:${{ github.sha }}

    - name: Deploy Amazon ECS task definition - Frontend
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def-frontend.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE_FRONTEND }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true

    - name: Deploy Amazon ECS task definition - Backend
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def-backend.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE_BACKEND }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true

    - name: Run database migrations
      run: |
        # Get the latest task definition ARN
        TASK_DEF_ARN=$(aws ecs describe-task-definition \
          --task-definition ${{ env.ECS_CLUSTER }}-backend \
          --query 'taskDefinition.taskDefinitionArn' \
          --output text)
        
        # Get subnet and security group IDs from the service
        SERVICE_CONFIG=$(aws ecs describe-services \
          --cluster ${{ env.ECS_CLUSTER }} \
          --services ${{ env.ECS_SERVICE_BACKEND }} \
          --query 'services[0].networkConfiguration.awsvpcConfiguration')
        
        SUBNETS=$(echo $SERVICE_CONFIG | jq -r '.subnets[0]')
        SECURITY_GROUPS=$(echo $SERVICE_CONFIG | jq -r '.securityGroups[0]')
        
        # Run migration task
        aws ecs run-task \
          --cluster ${{ env.ECS_CLUSTER }} \
          --task-definition $TASK_DEF_ARN \
          --overrides '{
            "containerOverrides": [{
              "name": "backend",
              "command": ["python", "-c", "from app import app, db; app.app_context().push(); db.create_all()"]
            }]
          }' \
          --launch-type FARGATE \
          --network-configuration "awsvpcConfiguration={
            subnets=[$SUBNETS],
            securityGroups=[$SECURITY_GROUPS],
            assignPublicIp=DISABLED
          }"

    - name: Health check
      run: |
        # Get ALB DNS name
        ALB_DNS=$(aws elbv2 describe-load-balancers \
          --query 'LoadBalancers[?contains(LoadBalancerName, `${{ env.ECS_CLUSTER }}`)].DNSName' \
          --output text)
        
        # Wait for services to be healthy
        sleep 60
        
        # Check frontend health
        curl -f "http://$ALB_DNS/" || exit 1
        
        # Check backend health
        curl -f "http://$ALB_DNS:8080/api/health" || exit 1
        
        echo "‚úÖ Health checks passed!"

    - name: Notify deployment status
      if: always()
      run: |
        if [ "${{ job.status }}" == "success" ]; then
          echo "üöÄ Deployment successful!"
          # Send success notification (Slack, email, etc.)
        else
          echo "‚ùå Deployment failed!"
          # Send failure notification
        fi

  infrastructure:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && contains(github.event.head_commit.message, '[deploy-infra]')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.5.0

    - name: Terraform Init
      working-directory: ./terraform
      run: terraform init

    - name: Terraform Plan
      working-directory: ./terraform
      run: terraform plan -no-color

    - name: Terraform Apply
      working-directory: ./terraform
      if: github.ref == 'refs/heads/main'
      run: terraform apply -auto-approve -no-color

    - name: Create ECS cluster and services on first deployment
      run: |
        # Check if cluster exists
        if ! aws ecs describe-clusters --clusters ${{ env.ECS_CLUSTER }} --query 'clusters[0].status' --output text | grep -q ACTIVE; then
          echo "Cluster not found, Terraform will create it"
        fi
